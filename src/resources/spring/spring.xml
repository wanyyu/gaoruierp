<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
	    http://www.springframework.org/schema/mvc
	    http://www.springframework.org/schema/mvc/spring-mvc.xsd
	    http://www.springframework.org/schema/context
	    http://www.springframework.org/schema/context/spring-context.xsd
	    http://www.springframework.org/schema/tx
	    http://www.springframework.org/schema/tx/spring-tx.xsd"
       default-autowire="byName">


    <context:component-scan base-package="com.gaorui.service" use-default-filters="false" >
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
    </context:component-scan>

    <mvc:annotation-driven />

    <!-- 扫描所有被注解的类 -->
    <context:component-scan base-package="com.gaorui.dao"></context:component-scan>
    <!-- 扫描控制器类 -->
    <context:component-scan base-package="com.gaorui.controller" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
    </context:component-scan>

    <mvc:annotation-driven />
    <mvc:default-servlet-handler/>
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
        <property name="contentType" value="text/html;charset=UTF-8" />
    </bean>

    <!-- 静态资源映射 -->
    <mvc:resources mapping="/resources/**" location="/resources/" />
    <mvc:resources mapping="/uploads/**" location="/uploads/" />

    <!-- 引用数据库资源文件 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:jdbc.properties</value>
        </property>
    </bean>
    <!-- 配置数据源，使用的是alibaba的Druid(德鲁伊)数据源 -->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!--<property name="driverClassName" value="${jdbc.driver}" />  &lt;!&ndash;数据库连接驱动&ndash;&gt;-->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="validationQuery" value="SELECT 1" />
        <!-- 初始化大小 -->
        <property name="initialSize" value="0" />
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="0" />
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="20" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000" />
        <!-- 获取连接时测试是否有效 -->
        <property name="testOnBorrow" value="false" />
        <!-- 归还连接时是否测试有效 -->
        <property name="testOnReturn" value="false" />
        <!-- 连接空闲时测试是否有效 -->
        <property name="testWhileIdle" value="true" />
        <!-- 逐出连接的检测时间间隔(主要用于检测空闲的连接) -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒,最小逐出时间 -->
        <property name="minEvictableIdleTimeMillis" value="25200000" />
        <!-- 打开关闭“赃”连接（调用过getVendorConnection方法）功能 -->
        <property name="removeAbandoned" value="true" />
        <!-- 连接泄漏的超时时间 -->
        <property name="removeAbandonedTimeout" value="1800" />
        <!-- 关闭泄漏的连接时打印堆栈信息 -->
        <property name="logAbandoned" value="true" />
        <!-- 监控数据库 -->
        <property name="filters" value="mergeStat" />
        <!-- "packagesToScan"扫描注解的持久化类 -->
    </bean>

    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource">
            <ref bean="dataSource" />
        </property>
        <!-- "packagesToScan"扫描注解的持久化类 -->
        <property name="packagesToScan" value="com.gaorui.entity"/>

        <property name="hibernateProperties">
            <props>
                <!--<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>-->
                <!--&lt;!&ndash; 第一次生成数据库的时候用create，之后换成update，否则内容会清空 &ndash;&gt;-->
                <!--<prop key="hibernate.hbm2ddl.auto">create</prop>-->
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <!--<prop key="hibernate.connection.url">jdbc:mysql://localhost:3306/gaorui</prop>-->
                <!--<prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>-->
                <!--<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate5.SpringSessionContext</prop>-->
                <!--<prop key="hibernate.connection.url">jdbc:mysql://localhost:3306/gaorui</prop>-->
                <!--<prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>-->
            </props>
        </property>
    </bean>

    <!--声明事务管理 -->
    <bean id="txManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!--植入声明式事务 -->
    <tx:annotation-driven transaction-manager="txManager"/>
</beans>